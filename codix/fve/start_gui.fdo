################################################################################
# "Copyright (C) 2013, ApS s.r.o Brno, All Rights Reserved"
#  Generated by Codasip HW generator v2.0.0
#  date: Mon Mar  4 12:01:29 2013
#  brief: Simulation start script, GUI mode.
################################################################################


# Create working library.
vlib work
vdel -all
vlib work

# DUT compilation
vcom -explicit -93 -cover sbce -work work ../vhdl/*.vhd

# ====================================
# Verification environment compilation
# ===================================
vlog -work work test_parameters.sv
vlog -work work ifc.sv

# sequence library
vlog -work work +incdir+seq_lib/ seq_lib/sv_seq_pkg.sv

# if golden model uses shared library, compile DPI package to control it
if [file exists golden_model/libgm.so] {
	vlog -work work +incdir+golden_model/ golden_model/codix_ia_dpi_pkg.sv
}
# golden model package
vlog -work work +incdir+golden_model/ golden_model/sv_golden_model_pkg.sv

# DPI-C for DMA transactions
if [file exists env_lib/dpi/dpi_wrapper_pkg.so] {
	vlog -work work +incdir+env_lib/dpi/ env_lib/dpi/dpi_wrapper_pkg.sv
}

# dpi environment library
vlog -work work +incdir+env_lib/dpi/ env_lib/dpi/sv_dpi_pkg.sv

# OVM environemtn library
vlog -work work +incdir+env_lib/ env_lib/sv_env_pkg.sv

# test library
vlog -work work +incdir+test_lib/ test_lib/sv_test_pkg.sv

# design under test module
vlog -work work dut.sv

# top level module
vlog -work work top_level.sv

# Find programs to run, first argument can represents one xexe program to run
if { $argc > 0 } {
	set PROGRAMS $1
} else {
	set PROGRAMS [lsort -dictionary [glob ./xexes/*.xexe]]
}
# Clear previous reports
#file delete report.txt
#file delete coverage.ucdb

# Set path to top level and DUT instance
set TOP_MODULE "codix_ca_top"
set DUT_MODULE "$TOP_MODULE/dut"
set HDL_DUT "$DUT_MODULE/HDL_DUT_U"

# Start of the simulation
if [file exists golden_model/libgm.so] {
	if [file exists env_lib/dpi/dpi_wrapper_pkg.so] {
		vsim -coverage -t 1ps -lib work $TOP_MODULE -sv_lib golden_model/libgm -sv_lib env_lib/dpi/dpi_wrapper_pkg -keeploadedrestart
        } else {
		vsim -coverage -t 1ps -lib work $TOP_MODULE -sv_lib golden_model/libgm -keeploadedrestart
        }
} else {
	vsim -coverage -t 1ps -lib work $TOP_MODULE
}
# Suppress warnings from arithmetic library during reset
#set NumericStdNoWarnings 1;
#set StdArithNoWarnings 1;
#when -fast -label disable_StdWarn {/codix_ca_top/dut/icodix_ca_core_regs_if/RST == 0} {
#	set NumericStdNoWarnings 1;
#	set StdArithNoWarnings 1;
#}
#when -fast -label enable_StdWarn {/codix_ca_top/dut/icodix_ca_core_regs_if/RST == 1} {
#	set NumericStdNoWarnings 0;
#	set StdArithNoWarnings 0;
#}

# Definition of signals in a wave window and complete GUI customization
source "./signals.fdo"
customize_gui /$DUT_MODULE /$HDL_DUT

# Simulate all programs
foreach PROGRAM $PROGRAMS {
	# Prepare report
	#exec echo -n "$PROGRAM\t\t" >> report.txt
	# Prepare program for HW
	#exec cut -c1-8 $PROGRAM.hw > ./xexes/mem_subblock_0
	#exec cut -c9-16 $PROGRAM.hw > ./xexes/mem_subblock_1
	#exec cut -c17-24 $PROGRAM.hw > ./xexes/mem_subblock_2
	#exec cut -c25-32 $PROGRAM.hw > ./xexes/mem_subblock_3
	# Prepare program for simulator
	#file copy -force $PROGRAM ./xexes/program

	restart -f

	# Load program into DUT memory
	#mem load -i ./xexes/mem_subblock_0 -startaddress 0 -format binary /$HDL_DUT/codix_ca/mem/memory_0
	#mem load -i ./xexes/mem_subblock_1 -startaddress 0 -format binary /$HDL_DUT/codix_ca/mem/memory_1
	#mem load -i ./xexes/mem_subblock_2 -startaddress 0 -format binary /$HDL_DUT/codix_ca/mem/memory_2
	#mem load -i ./xexes/mem_subblock_3 -startaddress 0 -format binary /$HDL_DUT/codix_ca/mem/memory_3

	# Set variables to run multiple programs
	#onElabError resume
	#onbreak resume
	#onfinish stop

	# Run the simulation
	run -all
	# Save coverage from current run
	#coverage save -codeAll -cvg "$PROGRAM.ucdb"
}

# merge coverage results from all runs
#set COVER_RESULTS [glob ./xexes/*.ucdb]
#vcover merge ./xexes/*.ucdb -out coverage.ucdb
# Delete coverage result for single program
#foreach RESULT $COVER_RESULTS {
#	file delete $RESULT
#}

# Generate coverage report
#vcover report -html -htmldir covreport coverage.ucdb
